

import os
import time
import random
import matplotlib.pyplot as plt
import pandas as pd

from metadrive import MetaDriveEnv
from metadrive.utils.draw_top_down_map import draw_top_down_map
from metadrive.engine.engine_utils import close_engine

import imageio.v2 as imageio
close_engine()

from datetime import datetime

# create the dir, use in python （ output_20240514_165230）
# timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
# output_dir = f"output_{timestamp}"
# os.makedirs(output_dir, exist_ok=True)
# print(f"📂 Saving all outputs to: {output_dir}")
# OUTPUT_DIR = output_dir


# create the dir, use in Dockerfile
output_base = "./outputs"
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
output_dir = os.path.join(output_base, f"output_{timestamp}")
os.makedirs(output_dir, exist_ok=True)
print(f"📂 Saving all outputs to: {output_dir}")
OUTPUT_DIR = output_dir



os.makedirs(OUTPUT_DIR, exist_ok=True)



import argparse

# Add command line parameter support
parser = argparse.ArgumentParser(description="Generate random MetaDrive maps and measure generation time.")
parser.add_argument("--start", type=int, default=5, help="Start value for map parameter (default: 5)")
parser.add_argument("--end", type=int, default=30, help="End value for map parameter (default: 30)")
parser.add_argument("--step", type=int, default=5, help="Step size for map parameter (default: 5)")

args = parser.parse_args()

# Generate a sequence of map parameters based on the parameters
map_params = list(range(args.start, args.end + 1, args.step))

print(f"🧭 Map parameter range: {map_params}")




results = []

for map_size in map_params:
    print(f"\n🛠 Generating map with parameter: {map_size} ...")
    start_time = time.time()

    env = MetaDriveEnv(config=dict(
        num_scenarios=1,
        map=map_size,  # This is the map generated by the program.
        start_seed=random.randint(0, 10000)
    ))

    env.reset()
    map_img = draw_top_down_map(env.current_map)
    env.close()

    # save image
    img_path = os.path.join(OUTPUT_DIR, f"map_{map_size}.png")
    plt.figure(figsize=(5, 5), dpi=100)
    plt.imshow(map_img, cmap="bone")
    plt.axis("off")
    plt.title(f"Map Size: {map_size}")
    plt.savefig(img_path, bbox_inches="tight", pad_inches=0)
    plt.close()

    # record time
    elapsed = time.time() - start_time
    print(f"✅ Done. Time taken: {elapsed:.2f}s")
    results.append((map_size, elapsed))









# Add this paragraph after all PNGs have been save
gif_path = os.path.join(OUTPUT_DIR, "map_sequence.gif")
image_files = sorted([f for f in os.listdir(OUTPUT_DIR) if f.endswith(".png") and f.startswith("map_")])

images = []
for filename in image_files:
    filepath = os.path.join(OUTPUT_DIR, filename)
    images.append(imageio.imread(filepath))

# Save gif, adjustable duration
imageio.mimsave(gif_path, images, duration=2)
print(f"🎞️  Saved animated map sequence GIF to {gif_path}")






# save time
df = pd.DataFrame(results, columns=["map_param", "generation_time_sec"])
df_path = os.path.join(OUTPUT_DIR, "timing_results.csv")
df.to_csv(df_path, index=False)

# Plotting Time Comparison Chart
plt.figure(figsize=(8, 5))
plt.plot(df["map_param"], df["generation_time_sec"], marker='o')
plt.xlabel("Map Parameter (Complexity)")
plt.ylabel("Generation Time (s)")
plt.title("Map Generation Time vs Complexity")
plt.grid(True)
plt.savefig(os.path.join(OUTPUT_DIR, "timing_plot.png"))

print("\n🎉 All maps generated and saved.")
